Módulos

Los módulos son una forma de organizar y reutilizar código en TypeScript, permitiendo dividir el código en diferentes archivos y exportar/importar elementos entre ellos. Esto ayuda a mantener el código limpio, modular y fácil de mantener.

cómo usarlos:

Paso 1: Configuración del compilador TypeScript
Asegúrate de tener TypeScript instalado en tu proyecto. Si no lo tienes, puedes instalarlo con npm (Node Package Manager) usando el siguiente comando:
npm install -g typescript

Paso 2: Crear un archivo de TypeScript
Crea un archivo TypeScript con la extensión ".ts". Por ejemplo, crea un archivo llamado "moduloEjemplo.ts".


Paso 3: Definir código en el módulo
Dentro del archivo "moduloEjemplo.ts", define las funciones, clases o variables que deseas exportar a otros archivos. Por ejemplo:

en moduloEjemplo.ts

export function sumar(a: number, b: number): number {
    return a + b;
  }
  
export function restar(a: number, b: number): number {
    return a - b;
}

Paso 4: Importar el módulo en otro archivo
Ahora, en otro archivo TypeScript, puedes importar las funciones o clases definidas en "moduloEjemplo.ts". Por ejemplo, crea un archivo llamado "main.ts":

en main.ts

import { sumar, restar } from './moduloEjemplo';

console.log(sumar(5, 3)); // Output: 8
console.log(restar(10, 4)); // Output: 6

Paso 5: Compilación y ejecución
Antes de ejecutar el código, debes compilar los archivos TypeScript a JavaScript. Desde la línea de comandos, ejecuta el siguiente comando:
tsc moduloEjemplo.ts main.ts 

Esto generará archivos JavaScript (.js) correspondientes a tus archivos TypeScript. Luego, puedes ejecutar el código usando Node.js:
node main.js

Y eso es todo. Ahora deberías ver los resultados de las funciones importadas desde el módulo.

Recuerda que el uso de módulos en TypeScript es muy flexible. Puedes exportar e importar diferentes elementos (funciones, clases, variables, interfaces, etc.) y organizarlos en módulos según tus necesidades para crear un código más estructurado y mantenible.